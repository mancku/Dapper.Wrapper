namespace Dapper.Wrapper.SqlManager
{
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;

    internal static class ExtensionsAndHelpers
    {
        internal static string? ConvertToSqlIn(this IReadOnlyCollection<int>? values)
        {
            var collection = values?.ToList();
            return IsNullOrEmpty(collection)
                ? null
                : $"IN ({string.Join(',', collection!)})";
        }

        internal static bool IsNullOrEmpty<T>(this IEnumerable<T>? collection)
        {
            return !(collection?.Any() ?? false);
        }

        internal static bool IsBaseEntityWithName<T>()
        {
            return typeof(T).IsSubclassOf(typeof(BaseEntityWithNameAndAutoGeneratedId));
        }

        internal static async Task CheckForDuplicatedNames<T>(this DapperWrapper sqlManager,
            IReadOnlyCollection<T> entities)
        {
            if (!IsBaseEntityWithName<T>())
            {
                return;
            }

            var entitiesAsBaseEntityWithName = entities
                .Cast<BaseEntityWithNameAndAutoGeneratedId>()
                .ToList();

            var duplicateNames = entitiesAsBaseEntityWithName
                .GroupBy(e => e.Name)
                .Where(g => g.Count() > 1)
                .Select(g => g.Key!)
                .ToList();
            if (duplicateNames.Any())
            {
                var message = CreatingDuplicateEntryException.MessageFromDuplicateValues(
                    nameof(BaseEntityWithNameAndAutoGeneratedId.Name),
                    duplicateNames);
                throw new CreatingDuplicateEntryException(message);
            }

            var currentEntities = await sqlManager.FindAsync<T>();
            duplicateNames = currentEntities.Cast<BaseEntityWithNameAndAutoGeneratedId>()
                .Select(x => x.Name!)
                .Intersect(entitiesAsBaseEntityWithName.Select(x => x.Name!))
                .ToList();
            if (duplicateNames.Any())
            {
                var message = EntityAlreadyExistsException.MessageFromDuplicateValues(
                    nameof(BaseEntityWithNameAndAutoGeneratedId.Name),
                    duplicateNames);
                throw new EntityAlreadyExistsException(message);
            }
        }
    }
}